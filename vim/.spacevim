
" You can enable the existing layers in space-vim and

" exclude the partial plugins in a certain layer.
" The command Layer is vaild in the function Layers().  Use exclude option if you don't want the full Layer,
" e.g., Layer 'better-defaults', { 'exclude': 'itchyny/vim-cursorword' }
function! Layers()

  " Default layers, recommended!
  Layer 'fzf'
  Layer 'unite'
  Layer 'airline'
  Layer 'better-defaults', { 'exclude': ['t9md/choosewin'] }
  Layer 'better-motion'
  Layer 'auto-completion'
  Layer 'code-snippets'
  Layer 'syntax-checking'
  Layer 'file-manager'
  Layer 'javascript'
  Layer 'html'
  Layer 'editing', {'exclude': 'scrooloose/nerdcommenter'}
  Layer 'git'
  Layer 'github'
  Layer 'ruby'
  Layer 'ycmd'
  Layer 'text-align'

endfunction

function! UserInit()

  " Space has been set as the default leader key,
  " if you want to change it, uncomment and set it here.
  let g:spacevim_leader = "s"
  let mapleader = "s"

  " let g:spacevim_localleader = ' '
  " Install private plugins

  Plug 'rhysd/clever-f.vim'
  Plug 'tpope/vim-unimpaired'
  Plug 'tpope/vim-repeat'
  Plug 'Chiel92/vim-autoformat'
  Plug 'flazz/vim-colorschemes'
  Plug 'xolox/vim-misc'
  Plug 'xolox/vim-session'
  Plug 'mattn/emmet-vim'
  Plug 'digitaltoad/vim-jade'
  Plug 'yggdroot/indentline'
  Plug 'kana/vim-textobj-user'
  Plug 'kana/vim-textobj-entire'
  Plug 'kana/vim-textobj-fold'
  Plug 'beloglazov/vim-textobj-quotes'
  Plug 'rhysd/vim-textobj-anyblock'
  Plug 'jceb/vim-orgmode'
  Plug 'othree/yajs'
  Plug 'tomtom/tcomment_vim'
  Plug 'prettier/vim-prettier'
  Plug 'christoomey/vim-tmux-navigator'
  Plug 'wellle/targets.vim'
  Plug 'dyng/ctrlsf.vim'
  Plug 'sickill/vim-monokai'

  " Ranger.vim
  Plug 'rbgrouleff/bclose.vim'
  Plug 'francoiscabrol/ranger.vim'

  " vim-yankstack
  Plug 'maxbrunsfeld/vim-yankstack'

  " vim-exchange
  Plug 'tommcdo/vim-exchange'

  " OceanicNext colorscheme
  Plug 'mhartington/oceanic-next'

  " Slim
  Plug 'slim-template/vim-slim', { 'for': 'slim' }

endfunction

" put your custom configurations here, e.g., change the colorscheme.
function! UserConfig()

  " Set modifiable to on
  set modifiable
  set iskeyword+=\-
  set mouse=a

  " Settings for russian language
  set keymap=russian-jcukenwin
  set iminsert=0
  set imsearch=0
  highlight lCursor guifg=NONE guibg=Cyan

  " Map leader for Ы key (for russian keyboard)
  nnoremap ы s

  set iskeyword+=\-

  " Apperance settings
  let g:airline_theme= 'oceanicnext'
  let g:airline_powerline_fonts = 1
  set encoding=utf-8

  " required if using https://github.com/bling/vim-airline
  let g:airline_powerline_fonts=1

  " Indentation settings
  set expandtab
  set shiftwidth=2
  set softtabstop=2
  set autoindent
  set smartindent
  set imsearch
  set foldmethod=syntax

  " Theme
  syntax enable
  colorscheme monokai
  highlight Normal ctermbg=NONE
  highlight nonText ctermbg=NONE

  " Or if you have Neovim >= 0.1.5
  if (has("termguicolors"))
   set termguicolors
  endif

  " Some custom mappings

  " Quick way to some text-objects
  xmap q iq
  omap q iq
  xmap b ib
  omap b ib

  " Alisases to ]<Space> and [<Space>
  nmap <Leader>[ [<Space>
  nmap <Leader>] ]<Space>

  " Remove highlighting
  nnoremap <Leader>n :nohl<CR>

  " Edit spacevim dotfile
  nnoremap <Leader>ev :e ~/.spacevim<CR>

  " Kill buffer without closing split window
  nnoremap <Leader>bd :bp\|bd! #<CR>

  " NERDTree
  nnoremap <leader>0 :NERDTreeFocus<cr>
  nnoremap <leader>tt :NERDTreeToggle<CR>
  nnoremap <Leader>tf :NERDTreeFind<CR>

  " Javascript language vim settings
  let g:javascript_plugin_jsdoc = 1

  " Ranger
  let g:ranger_map_keys = 0
  nnoremap <Leader>arr :Ranger<CR>

  " Vim session
  let g:session_autosave = 'yes'

  " session mapping
  nnoremap <Leader>ss :SaveSession!<CR>
  nnoremap <Leader>sl :OpenSession<CR>
  nnoremap <Leader>sn :SaveSession
  nnoremap <Leader>sc :SClose<CR>

  " Restart Vim
  nnoremap <Leader>sr :RestartVim<CR>

  " Set session dir for startify
  let g:startify_session_dir = '~/.vim/sessions'
  let g:startify_list_order = ['sessions', 'files', 'bookmarks', 'dir']

  " FZF settings and mappings
  nnoremap <Leader>pa :Ag<CR>
  nnoremap <Leader>pf :GFiles<CR>
  nnoremap <Space> :GFiles<CR>
  nnoremap <C-Space> :Buffers<CR>
  nnoremap <Leader>ph :History<CR>
  nnoremap <Leader>pt :Tags<CR>

  " Terminal emulator mappings
  tnoremap <Esc> <C-\><C-n>

  " Terminal mappings
  nnoremap <Leader>tT :sp <bar> resize 10 <bar> term<CR>

  " Autoformat buffer
  nnoremap <Leader>bf :Autoformat<CR>

  " Quit vim mappings
  nnoremap <Leader>qq :wq<CR>
  nnoremap <Leader>qQ :q!<CR>
  nnoremap <Leader>qa :wqa<CR>
  nnoremap <Leader>qr :source ~/.spacevim <bar> :AirlineRefresh<CR>

  set timeout ttimeoutlen=50

  " Expand emmet abbreviation
  imap jf <Plug>(emmet-expand-abbr)

  " Easymotion
  let g:EasyMotion_use_smartcase = 1

  nmap <Leader>j <Plug>(easymotion-prefix)

  " Indentline
  let g:indentLine_enabled = 0

  " Toggle indent lines
  nnoremap <Leader>ti :IndentLinesToggle<CR>

  " Resize window mappings
  map <M-]> :resize +5<CR>
  map <M-[> :resize -5<CR>
  map <C-]> :vertical resize +5<CR>
  map <C-[> :vertical resize -5<CR>

  " clipboard easy yank & paste
  nnoremap <Leader>ay "+y
  nnoremap <Leader>ap "+1

  " Vim metarepeat
  nmap m <Plug>(metarepeat-preset-occurence)
  vmap go <Plug>(metarepeat-preset-occurence)

  " Vim swoop
  let g:swoopUseDefaultKeyMap = 1

  " YouCompleteMe
  let g:ycm_min_num_of_chars_for_completion = 1

  " vim-yankstack
  nnoremap <M-p> <Plug>yankstack_substitute_newer_paste
  augroup netrw_mapping
    autocmd!
    autocmd filetype netrw call NetrwMapping()
  augroup END

  " Multiple cursors mappings
  let g:multi_cursor_next_key = '<C-n>'
  let g:multi_cursor_prev_key = '<C-p>'
  let g:multi_cursor_skip_key = '<C-x>'
  let g:multi_cursor_quit_key = '<Esc>'

  " CtrlSF settings
  " let g:ctrlsf_default_root = 'project'
  let g:ctrlsf_position = 'bottom'

  " Run marcos over selected lines
  xnoremap @ :<C-u>call ExecuteMacroOverVisualRange()<CR>
  function! ExecuteMacroOverVisualRange()
    echo "@".getcmdline()
    execute ":'<,'>normal @".nr2char(getchar())
  endfunction
  "

endfunction
